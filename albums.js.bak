const ALBUM_DATA_URL = 'https://opensheet.elk.sh/1LOx-C1USXeC92Mtv0u6NizEvcTMWkKJNGiNTwAtSj3E/1';

const albumState = {
  albums: [],
};

const albumElements = {
  grid: null,
  status: null,
};

const releaseDateFormatter = new Intl.DateTimeFormat('en-GB', {
  year: 'numeric',
  month: 'short',
  day: 'numeric',
});

document.addEventListener('DOMContentLoaded', () => {
  albumElements.grid = document.querySelector('#albumGrid');
  albumElements.status = document.querySelector('#albumsStatus');

  if (!albumElements.grid || !albumElements.status) {
    console.error('Albums page is missing required containers.');
    return;
  }

  hydrateAlbumsPage();
});

async function hydrateAlbumsPage() {
  setAlbumsStatus('Loading albums...');

  try {
    const response = await fetch(ALBUM_DATA_URL, { cache: 'no-cache' });
    if (!response.ok) {
      throw new Error(`Failed to fetch albums: ${response.status} ${response.statusText}`);
    }

    const payload = await response.json();
    if (!Array.isArray(payload)) {
      throw new Error('Unexpected response format for albums.');
    }

    albumState.albums = normalizeAlbums(payload);
    renderAlbumGrid(albumState.albums);
    if (albumState.albums.length === 0) {
      setAlbumsStatus('No recent releases to display.');
    } else {
      setAlbumsStatus('');
    }
  } catch (error) {
    console.error(error);
    setAlbumsStatus('We could not load albums. Please try again later.');
  }
}

function normalizeAlbums(records) {
  return records
    .map((record, index) => buildAlbumRecord(record, index))
    .filter(Boolean)
    .sort((a, b) => {
      if (a.releaseDateValue === b.releaseDateValue) {
        return a.artistName.localeCompare(b.artistName);
      }
      return b.releaseDateValue - a.releaseDateValue;
    });
}

function buildAlbumRecord(record, index) {
  if (!record) return null;

  const hideValue = (record.hide ?? record.Hide ?? '').toString().trim().toLowerCase();
  if (hideValue === 'true') {
    return null;
  }

  const artistName = (record['Artist name'] || record.artist || '').toString().trim();
  const latestRelease = (record.latest_release || '').toString().trim();
  const releaseDateRaw = (record.release_date || '').toString().trim();
  const releaseDate = parseReleaseDate(releaseDateRaw);

  return {
    id: record['spotify ID'] || record['MusicBrainz ID'] || `album-${index}`,
    artistName: artistName || 'Unknown artist',
    latestRelease: latestRelease || 'Release details coming soon',
    releaseDate,
    releaseDateRaw,
    releaseDateValue: releaseDate ? releaseDate.getTime() : Number.NEGATIVE_INFINITY,
    releaseDateFormatted: releaseDate ? releaseDateFormatter.format(releaseDate) : 'Date TBC',
  };
}

function parseReleaseDate(value) {
  if (!value) return null;

  const cleanedValue = value.trim();
  if (!cleanedValue) return null;

  const isoMatch = cleanedValue.match(/^(\d{4})-(\d{2})-(\d{2})$/);
  if (isoMatch) {
    const [_, year, month, day] = isoMatch;
    return new Date(Number(year), Number(month) - 1, Number(day));
  }

  const dmyMatch = cleanedValue.match(/^(\d{1,2})-(\d{1,2})-(\d{4})$/);
  if (dmyMatch) {
    const [_, day, month, year] = dmyMatch;
    return new Date(Number(year), Number(month) - 1, Number(day));
  }

  const parsed = new Date(cleanedValue);
  return Number.isNaN(parsed.getTime()) ? null : parsed;
}

function renderAlbumGrid(albums) {
  albumElements.grid.innerHTML = '';

  if (!albums.length) {
    return;
  }

  const fragment = document.createDocumentFragment();

  for (const album of albums) {
    fragment.appendChild(createAlbumCard(album));
  }

  albumElements.grid.appendChild(fragment);
}

function createAlbumCard(album) {
  const card = document.createElement('article');
  card.className = 'album-card';
  card.setAttribute('data-album-id', album.id);

  const cover = document.createElement('div');
  cover.className = 'album-card__cover';
  cover.setAttribute('aria-hidden', 'true');

  const coverLabel = document.createElement('span');
  coverLabel.className = 'album-card__cover-label';
  coverLabel.textContent = 'Artwork coming soon';
  cover.appendChild(coverLabel);

  const body = document.createElement('div');
  body.className = 'album-card__body';

  const artist = document.createElement('p');
  artist.className = 'album-card__artist';
  artist.textContent = album.artistName;

  const release = document.createElement('p');
  release.className = 'album-card__release';
  release.textContent = album.latestRelease;

  const date = document.createElement('p');
  date.className = 'album-card__date';

  if (album.releaseDate) {
    const time = document.createElement('time');
    time.dateTime = album.releaseDateRaw || album.releaseDate.toISOString().split('T')[0];
    time.textContent = album.releaseDateFormatted;
    date.append('Release date: ', time);
  } else {
    date.textContent = 'Release date: TBD';
  }

  body.append(release, date);

  const actions = document.createElement('div');
  actions.className = 'album-card__actions';

  const hideButton = document.createElement('button');
  hideButton.type = 'button';
  hideButton.className = 'album-card__hide-button';
  hideButton.textContent = 'Hide';
  hideButton.setAttribute('aria-label', `Mark ${album.latestRelease} as hidden`);

  actions.appendChild(hideButton);

  card.append(cover, body, actions);
  return card;
}

function setAlbumsStatus(message) {
  if (!albumElements.status) return;
  albumElements.status.textContent = message;
  albumElements.status.style.display = message ? 'block' : 'none';
}
